# This file is just a list of exports and documentation. The source
# code for this file is in Libpng.xs in the top directory.

package Image::PNG::Libpng;
use warnings;
use strict;

require Exporter;
use Carp;
our @ISA = qw(Exporter);
our @EXPORT_OK = qw/
[% FOR function IN functions -%]
	[% function %]
[% END -%]
read_png_file
write_png_file
color_type_name
get_internals
copy_png
/;

our %EXPORT_TAGS = (
    all => \@EXPORT_OK,
);

require XSLoader;
[% INCLUDE version %]
XSLoader::load('Image::PNG::Libpng', $VERSION);

# Old undocumented function name

sub read_file
{
    goto & read_png_file;
}

# Old undocumented function name

sub write_file
{
    goto & write_png_file;
}

sub read_png_file
{
    my ($file_name, %options) = @_;
    my $png = create_read_struct ();
    if ($options{transforms}) {
	$png->set_transforms ($options{transforms});
    }
    open my $in, "<:raw", $file_name
        or croak "Cannot open '$file_name' for reading: $!";
    $png->init_io ($in);
    $png->read_png ();
    close $in or croak $!;
    return $png;
}

sub write_png_file
{
    my ($png, $file_name) = @_;
    open my $in, ">:raw", $file_name
        or croak "Cannot open '$file_name' for writing: $!";
    $png->init_io ($in);
    $png->write_png ();
    close $in or croak $!;
}

my %known_chunks = (
[% FOR chunk IN chunks %]
[% IF chunk.in_valid %][% chunk.name %] => 1,[% END %]
[% END %]
);

sub get_chunk
{
    my ($png, $chunk) = @_;
    if ($chunk eq 'IDAT') {
	croak "Use get_rows";
    }
    if ($known_chunks{$chunk}) {
	no strict 'refs';
	my $sub = "get_$chunk";
	return &$sub ($png); 
    }
    return undef;
}

sub set_chunk
{
    my ($png, $chunk, $value) = @_;
    if ($chunk eq 'IDAT') {
	croak "Use get_rows";
    }
    if ($known_chunks{$chunk}) {
	no strict 'refs';
	my $sub = "set_$chunk";
	return &$sub ($png, $value); 
    }
    croak "Unknown chunk $chunk";
}

sub copy_png
{
    my ($png, %options) = @_;
    my $opng = create_write_struct ();
    if ($options{verbosity}) {
	$opng->set_verbosity ($options{verbosity});
    }
    my $valid = $png->get_valid ();
    $opng->set_IHDR ($png->get_IHDR ());
    for my $chunk (keys %$valid) {
	if ($chunk eq 'IHDR') {
	    next;
	}
	if ($chunk eq 'IDAT') {
	    my $rows = get_rows ($png);
	    $opng->set_rows ($rows);
	}
	elsif ($valid->{$chunk}) {
	    $opng->set_chunk ($chunk, $png->get_chunk ($chunk));
	}
    }
    return $opng;
}

[% FOR what IN ['width', 'height'] %]
sub [% what %]
{
    goto & get_image_[% what %];
}
[% END %]


1;

# Local Variables:
# mode: perl
# End:
