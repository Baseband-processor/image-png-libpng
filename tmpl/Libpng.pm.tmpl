# This file is just a list of exports and documentation. The source
# code for this file is in Libpng.xs in the top directory.

package [% config.base %]::Libpng;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter);
@EXPORT_OK = qw/
[% FOR function IN functions -%]
	[% function %]
[% END -%]
/;

require XSLoader;
[% INCLUDE version %]
XSLoader::load('[% config.base %]', $VERSION);

1;

=head1 NAME

[% config.base %]::Libpng - Perl interface to the C library "libpng".

=head1 SYNOPSIS

     use [% config.base %]::Libpng;
     my $png = [% config.base %]::Libpng::create_read_struct ();
     my $info = [% config.base %]::Libpng::create_info_struct ($png);
     open my $file, '<:raw', 'nice.png';
     [% config.base %]::Libpng::init_io ($png, $file);
     [% config.base %]::Libpng::read_png ($png, $info);
     close $file;
     [% config.base %]::Libpng::destroy_read_struct ($png, $info);

[% config.base %]::Libpng enables Perl to use the "libpng" library for reading
and writing files in the PNG (Portable Network Graphics) format.

[% config.base %]::Libpng consists of Perl subroutines which mirror the C
functions in libpng, plus helper subroutines to make it easier to read
and write PNG data in Perl.

If you are looking for an easy way to access PNG files, I recommend
you to try the companion module L<[% config.base %]>, which offers a
simplified "object-oriented" interface to the functions in this
module.

=head1 FUNCTIONS

=head2 create_read_struct

     my $png = create_read_struct ();

Create a structure for reading a PNG.

=head3 libpng correspondance

This function corresponds to C<png_create_read_struct> in libpng with
all of the error and warning handler variables set to zero, which
means that the error and warning methods used are the default libpng
ones. There is no facility to alter the libpng error handler in
[% config.base %]. See L</BUGS>.

=head2 create_write_struct

     my $png = create_write_struct ();

Create a structure for writing a PNG.

=head3 libpng correspondance

This function corresponds to C<png_create_write_struct> in libpng with
all of the error and warning handler variables set to zero, which
means that the error and warning methods used are the default libpng
ones. There is no facility to alter the libpng error handler in
[% config.base %]. See L</BUGS>.

=head2 destroy_read_struct

     destroy_read_struct ($png, $info, $end_info);

This frees the memory associated with C<$png>, C<$info> and
C<$end_info>. If one or both of C<$info> and C<$end_info> have not
been allocated, this will just free the memory associated with
C<$png>. You can call it without C<$info> and C<$end_info> if these
have not been allocated yet:

     destroy_read_struct ($png);

=head3 libpng correspondance

This function corresponds to C<png_destroy_read_struct>.

=head2 destroy_write_struct

     destroy_write_struct ($png, $info);

This frees the memory associated with C<$png> and C<$info>. If
C<$info> has not been allocated it will just free the memory
associated with C<$png>. You can call it without C<$info> if C<$info>
has not been allocated yet:

     destroy_write_struct ($png);

=head3 libpng correspondance

This function corresponds to C<png_destroy_write_struct>.

=head2 init_io

     open my $file, "<", 'nice.png';
     init_io ($png, $file);

Set the file which C<$png> reads or writes to C<$file>. C<$file> must
be an already-opened Perl file handle.

=head3 libpng correspondance

This function corresponds to C<png_init_io> in libpng, with a Perl
file handle substituting for the C C<FILE *>.

=head2 sig_cmp

    if (sig_cmp ($should_be_png)) {
        print "Your data does not have a PNG signature.\n";
    }

This subroutine looks at the data in C<$should_be_png> and checks
whether its first bytes correspond to a valid PNG signature. It
returns a true value if they do not. It can also take two further
arguments consisting of a byte offset and a number of bytes to
check respectively:

    sig_cmp ($should_be_png, 0, 8);

If these arguments are not supplied, the byte offset is assumed
to be zero, and the number of bytes to check is assumed to be eight.

=head3 libpng correspondance

This function corresponds to C<png_sig_cmp>, with default arguments of
0 and 8 if second and third arguments are not supplied.

=head2 scalar_as_image

     my $png = create_read_struct ();
     scalar_as_image ($png, $string);

This subroutine sets the image data of C<$png> to be the contents of a
Perl scalar variable C<$string>. In other words, a read operation by
C<$png> will read the data in C<$string>.

Please note that this is insecure at the moment, and may cause a fatal
error such as a segmentation fault. See the section L</BUGS> in this
document.

=head3 libpng correspondance

This subroutine uses C<png_set_read_fn> to set the reading function of
C<$png> to be its own routine, called C<perl_png_scalar_read>, in the
file C<perl-libpng.c> in the top directory of the distribution, which
reads data from the Perl scalar.

=head2 create_info_struct

     my $info = create_info_struct ($png);

This subroutine creates a PNG C<$info> structure.

=head3 libpng correspondance

This corresponds to C<png_create_info_struct>.

=head2 read_info

     read_info ($png, $info);

Read the information segment of the PNG file.

=head3 libpng correspondance

This corresponds to C<png_read_info>.

=head2 read_png

     read_png ($png, $info);

Read the entire PNG file. You can provide a third argument containing
transformations to apply to the image:

     use [% config.base %]::Const qw/PNG_TRANSFORM_STRIP_ALPHA PNG_GRAY_TO_RGB/;
     read_png ($png, $info, PNG_TRANSFORM_STRIP_ALPHA | PNG_GRAY_TO_RGB);

In the absence of any third argument, the default value of
C<PNG_TRANSFORM_IDENTITY> is applied.

=head3 libpng correspondance

This corresponds to C<png_read_png> with a default value for the third
argument. The fourth, unused, argument to C<png_read_png> does not
need to be supplied.

=head2 get_IHDR

    my %IHDR;
    my $status = get_IHDR ($png, $info, \%IHDR);

Read the IHDR information from the PNG file. 

=head3 libpng correspondance

This corresponds to C<png_get_IHDR>, with a single Perl hash reference
used instead of the several pointers to integers used in libpng.

=head2 get_tIME

    my %times;
    [% config.base %]::Libpng::get_tIME ($png, $info, \%times);

This subroutine gets the modification time value of the PNG image and
puts it into fields labelled "year", "month", "day", "hour", "minute"
and "second" of the hash reference given as the third argument.

=head3 libpng correspondance

This corresponds to C<png_get_tIME>, with a Perl hash reference
substituted for the C struct C<png_timep> used in libpng.

=head2 get_text

    my @text_chunks;
    [% config.base %]::Libpng::get_text ($png, $info, \@text_chunks);

This subroutine gets all the text chunks in the PNG image and puts
them into the array reference given as the third argument. Each
element of the array represents one text chunk. The element
representing one chunk is a hash reference with the text fields such
as "key", "lang_key", "compression" taken from the PNG's information.

The text data is uncompressed by libpng. If it is international text,
[% config.base %] puts it into Perl's internal Unicode encoding (UTF-8). Note
that PNG international text is required to be in the UTF-8
encoding. See L</The PNG Specification> for more on the requirements
of a PNG text section.

=head3 libpng correspondance

This corresponds to C<png_get_text>, with a Perl array of hash
references substituted for the C array of structs used in libpng.

=head2 get_color_type

    my $color_type;
    [% config.base %]::Libpng::get_color_type ($png, $info, \$color_type);

This returns an integer value. If you want to get a name for the
colour type, use L</color_type_name>.

=head3 libpng correspondance

This corresponds to C<png_get_color_type>.

=head2 color_type_name

    my $name = [% config.base %]::Libpng::color_type_name ($color_type);

Given a numerical colour type in C<$color_type>, return the equivalent
name. The name is in upper case, with words separated by underscores,
as in C<RGB_ALPHA>.

=head3 libpng correspondance

This function does not correspond to anything in libpng. The names of
the colour types are taken from those defined in the libpng header
file, C<png.h>.

=head2 text_compression_name

    my $name = [% config.base %]::Libpng::text_compression_name ($text->{compression});

Given a numerical text compression type, return the equivalent
name. The name is in upper case. The possible return values are

=over

=item TEXT_NONE

=item TEXT_zTXt

=item ITXT_NONE

=item ITXT_zTXt

=item an empty string

if the compression method is unknown.

=back

For some reason the compression field is also used to store the
information about whether the text is "international text" in UTF-8 or
not.

=head3 libpng correspondance

This function does not correspond to anything in libpng. The names of
the text compression types are based on those in C<png.h>, but without
the word "COMPRESSION", so for example the libpng constant
C<PNG_ITXT_COMPRESSION_zTXt> corresponds to a return value of
C<ITXT_zTXt>.

=head2 get_libpng_ver

    my $libpng_version = [% config.base %]::Libpng::get_libpng_ver ();

This function returns the version of the libpng library which the
module is using.

=head3 libpng correspondance

This function corresponds to C<png_get_libpng_ver>. However, it
doesn't require the C<png_structp> argument of the C function. See
L</About libpng>.

=head2 access_version_number

    my $libpng_version_number = [% config.base %]::Libpng::access_version_number ();

This function returns the version of the libpng library which the
module is using as an integer number.

=head3 libpng correspondance

This function corresponds to C<png_access_version_number>.

=head2 get_PLTE

     my @colours;
     my $ok = [% config.base %]::Libpng::get_PLTE ($png, $info, \@colours);
     my $green = $colours[20]->{green};

This function gets the palette from the PNG. The return value of the
palette is put into the array reference given as the third
argument. This array contains hash references with the values "green",
"blue" and "red" for the colour of each pixel in the
palette. Pre-existing contents of the array given as the third
argument will be deleted.

It returns a true value if it succeeds, and a false value if it does
not.

Note that a PNG may or may not contain a palette. To check whether the
PNG actually contains a palette, use something of the following form:

     use [% config.base %]::Const ':all';
     my $color_type;
     [% config.base %]::Libpng::get_color_type ($png, $info, \$color_type)
     if ($color_type == PNG_COLOR_TYPE_PALETTE) {
         # The PNG uses a palette.
     }

=head3 libpng correspondance

This function corresponds to C<png_get_PLTE>, except for the fourth
argument, the number of colours in the palette, which is not necessary
in a Perl routine, since Perl arrays contain their own size.

=head2 get_rows

    my $rows = [% config.base %]::Libpng::get_rows ($png, $info);
    my $pixel = substr ($rows->[10], 20, 1);

This subroutine returns the rows of the PNG image, after uncompressing
and unfiltering, as binary data. The return value, C<$rows> in the
example, is an array reference with a number of rows equal to the
height of the PNG image. Each row consists of the actual binary data,
which you will need to cut out using a routine like L<substr> to
access pixel values. This binary data is likely to contain bytes equal
to zero.

You can get the number of bytes in each row using L</get_rowbytes>.

Please note that Perl automatically terminates each row of data with
an extra zero byte at the end.

=head3 libpng correspondence

This corresponds to C<png_get_rows>.

=head2 get_rowbytes

    my $bytes_in_a_row = get_rowbytes ($png, $info);

=head3 libpng correspondence

This corresponds to C<png_get_rowbytes>.

=head1 UNIMPLEMENTED

[% config.base %]::Libpng is intended to be a Perl interface for most of
libpng's functionality. However, I do not plan to add the following
functions from libpng to [% config.base %]::Libpng.

=head2 Memory management functions

=over

=item png_malloc

=item png_free

=back

=head2 Error handling functions

=over

=item png_error

=item png_get_error_ptr

=back

=head2 Input/output manipulation functions

=over

=item png_set_write_fn

=item png_set_read_fn

=back

The same functionality as these offer is available via L</scalar_as_image>.

=head1 BUGS

This section documents some known deficiencies in the module.

=head2 No error handlers

The PNG error handlers should probably be set to something which Perl
can make sense of, but I'm not too sure how to set this up.

=head2 Perl scalars as PNG data has a memory corruption risk.

The function L</scalar_as_image> doesn't do anything to safeguard the
memory in the scalar. It also doesn't free the memory it has used.

=head2 Conditional compilation

It is possible to compile a version of the libpng library without
support for, for example, text chunks by undefining a macro
(C<PNG_TEXT_SUPPORTED>). However, this module ignores your libpng
compilation choices, so it won't compile if you have such a libpng.

I don't know whether many people in practice actually have such a
libpng without text support or the other optional facilities, but if
you encounter problems using this Perl module because of your
conditionally-compiled libpng, then please let me know and I'll
consider adding that facility to the module.

=head2 About libpng

Since [% config.base %]::Libpng is closely based on libpng, please be
warned that the libpng library is partially undocumented and highly
inconsistent.

The first odd thing you might notice is that the main convention
libpng uses, having two structures, "png" and "info", for each call,
isn't necessary; there is very little you can do with only a "png"
structure or only an "info" structure, so there is no logical reason
to make every use of the library rely on creating and passing around
two structures instead of one.

Next, some of the things it asks for, for example requiring the user
to allocate a C<png_struct> before calling the library to ask for its
version number (see L</get_libpng_ver>), don't seem to have any basis
in rationality; the library ignores the allocated structure anyway.

There is also little consistency between different functions, with
some returning their results using references, and some using the
function return value. For example C<png_get_rows> (see L</get_rows>)
uses the return value of the function to return an array of pointers,
and yet C<png_get_PLTE> (see L</get_PLTE>) uses a pointer reference to
return an array of pointers, and the return value to indicate errors.

The error handling is also very odd; some functions use the return
value to indicate errors, and some of the functions don't bother
indicating errors at all but simply fail silently on what should be
fatal error conditions. Compounding this, some of the functions which
use the return value to indicate an error use a non-zero value to
indicate an error, and some of them use a zero value to indicate an
error.

The libpng documentation suggests using setjmp/longjmp to handle
errors, which is not a sensible way to deal with errors in library
code, and is not something I would want to introduce into a Perl
extension module.

Finally, many parts of the interface aren't properly documented.  For
example, for many of the functions in the library there is no
information anywhere in the documentation about the return values of
the functions, and one simply has to examine the source code.

So, the main interface of this package is in L<[% config.base %]>, and
this module is just a bridge between L<[% config.base %]> and
libpng. I made [% config.base %]::Libpng a mirror of the libpng
functions not because I think that the libpng functions are worth
duplicating in Perl, but because I don't want to have to design a
consistent procedural interface to libpng in Perl.  If you find [%
config.base %]::Libpng inconsistent and confusing, please use L<[%
config.base %]> instead. [% config.base %]::Libpng is a representation
of libpng's fairly eccentric interface in Perl, whereas L<[%
config.base %]> is an attempt to make a simple Perl interface to the
PNG file format.

=head3 "Official" documentation

The starting point is the plain text libpng manual at
L<http://libpng.org/pub/png/libpng-manual.txt> and the manual page
libpng.3, which you can read using "man 3 libpng".

Be warned that the documentation which comes with libpng is rather
sketchy. See L</About libpng>. It doesn't contain full specifications
(prototypes, return values) for all of the functions in the
library. If you are considering programming in C using libpng, you
will definitely also need to look at the header file "png.h".  In some
cases you will also need to look at the source code of the library.

=head3 Unofficial documentation

There is a collection of function definitions under the title
"Interface Definitions for libpng12" at
L<http://refspecs.freestandards.org/LSB_3.1.1/LSB-Desktop-generic/LSB-Desktop-generic/libpng12man.html>
as part of the "Linux Standard Base Desktop Specification". These
contain extensive information on the prototypes and return values for
the libpng routines, something which is often only available elsewhere
by actually looking at the libpng source code. These pages are usually
the first hits on search engines if you search for a function name in
libpng.

=head3 PNG to/from Perl scalars

For the method used to create L</scalar_as_image>, see 
"Reading PNG Images from Memory - Joey Hammer's .plan" at L<http://blog.hammerian.net/2009/reading-png-images-from-memory/>. 
This explains how to use libpng's C<png_set_read_function> to read from in-memory data.

=head3 libpng examples in C

The following pages are some examples of using libpng in C to create
PNG files.

=over

=item Write a PNG file using C and libpng

See L<http://www.lemoda.net/png/c-write-png/index.html> for an example
of how to write a PNG file using libpng.

=item Set the modification time of a PNG

See L<http://www.lemoda.net/png/png-set-time/index.html> for an
example of how to set the modification time of a PNG file in C.

=item Create a PNG with text segments

See L<http://www.lemoda.net/png/png-text/index.html> for an example of
how to make a PNG file with text segments in C.

=back

[% INCLUDE "author" %]

=cut

# Local Variables:
# mode: perl
# End:
