# This file is just a list of exports and documentation. The source
# code for this file is in Libpng.xs in the top directory.

package Image::PNG::Libpng;
require Exporter;
require DynaLoader;
use Carp;
@ISA = qw(Exporter);
@EXPORT_OK = qw/
[% FOR function IN functions -%]
	[% function %]
[% END -%]
read_png_file
write_png_file
color_type_name
get_internals
/;

use warnings;
use strict;

%EXPORT_TAGS = (
    all => \@EXPORT_OK,
);

require XSLoader;
[% INCLUDE version %]
XSLoader::load('Image::PNG::Libpng', $VERSION);

# Old undocumented function name

sub read_file
{
    goto & read_png_file;
}

# Old undocumented function name

sub write_file
{
    goto & write_png_file;
}

sub read_png_file
{
    my ($file_name) = @_;
    my $png = create_read_struct ();
    open my $in, "<:raw", $file_name
        or croak "Cannot open '$file_name' for reading: $!";
    $png->init_io ($in);
    $png->read_png ();
    close $in or croak $!;
    return $png;
}

sub write_png_file
{
    my ($png, $file_name) = @_;
    open my $in, ">:raw", $file_name
        or croak "Cannot open '$file_name' for writing: $!";
    $png->init_io ($in);
    $png->write_png ();
    close $in or croak $!;
}

my %known_chunks = (
[% FOR chunk IN chunks %]
[% IF chunk.in_valid %][% chunk.name %] => 1,[% END %]
[% END %]
);

sub get_chunk
{
    my ($png, $chunk) = @_;
    if ($chunk eq 'IDAT') {
	croak "Use get_rows";
    }
    if ($known_chunks{$chunk}) {
	no strict 'refs';
	my $sub = "get_$chunk";
	return &$sub ($png); 
    }
    return undef;
}

sub set_chunk
{

}


1;

# Local Variables:
# mode: perl
# End:
