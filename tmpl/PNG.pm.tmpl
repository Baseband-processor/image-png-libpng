package [% config.base %];
require Exporter;
@ISA = qw(Exporter);
@EXPORT_OK = qw/display_text/;
use [% config.base %]::Const ':all';
use [% config.base %]::Libpng;
use warnings;
use strict;
use Carp;

[% INCLUDE version %]

sub error
{
    my ($png) = @_;
    return $png->{error_string};
}

sub fatal_error
{
    my ($png) = @_;
    return $png->{error_string};
}

my %IHDR_fields = (
    width => {
    },
    height => {
    },
    bit_depth => {
        default => 8,
    },
    color_type => {
    },
    interlace_type => {
        default => PNG_INTERLACE_NONE,
    },
);


sub write_info_error
{
    my ($png) = @_;
    my @unset;
    for my $field (sort keys %IHDR_fields) {
        if (!$IHDR_fields{$field}{default}) {
            push @unset, $field;
        }
        print "Set the following fields: ", join ", ", @unset;
    }
}

sub new
{
    my ($package, $options) = @_;
    my $png = {};
    bless $png;
    # The marker "read_ok" is set to true if a PNG file has
    # successfully been read into the data object.
    $png->{read_ok} = undef;
    # The marker "error_string" contains the most recent error.
    $png->{error_string} = '';
    if ($options && ref $options eq 'HASH') {
        if ($options->{verbose}) {
            $png->{verbose} = $options->{verbose};
        }
        if ($options->{file}) {
            $png->read_file ($options->{file});
        }
    }
    return $png;
}

sub read_file
{
    my ($png, $file_name) = @_;
    if (! defined $file_name) {
        carp __PACKAGE__, ": You called 'read_file' without giving a file name";
        return;
    }
    if ($png->{read_file_name}) {
        carp __PACKAGE__,
            ": I have already been used to read a file called '$png->{read_file_name}': please create a new object for '$file_name'.";
        return;
    }
    $png->{read_file_name} = $file_name;
    if (! -f $png->{read_file_name}) {
        carp __PACKAGE__, 
            ": I was asked to read a file '$png->{read_file_name}' which I can't locate";
        return;
    }
    $png->{read_png} = [% config.base %]::Libpng::create_read_struct ();
    if (! open $png->{read_fh}, "<:raw", $png->{read_file_name}) {
        carp __PACKAGE__,
            ": I tried to open $png->{read_file_name} but encountered the following error: $!";
        return;
    }
    [% config.base %]::Libpng::init_io ($png->{read_png}, $png->{read_fh});
    [% config.base %]::Libpng::read_png ($png->{read_png});
    $png->{read_ok} = 1;
    return 1;
}

sub write_file
{
    my ($png, $file_name) = @_;
    if (! $png->{write_ok}) {
        if (! $png->{read_ok}) {
            $png->write_info_error ();
        }
        $png->init_write ();
    }
#    if (! $png->{write}->{
}

sub write_set
{
    my ($png, $key, $value) = @_;
    if (! $png->{write_ok}) {
        $png->init_write ();
    }
    $png->{write}->{$key} = $value;
}

# Initialize the object $png for writing (get the stupid libpng things
# we need to write an image, set a flag "write_ok" in the image.).

sub init_write
{
    my ($png) = @_;
    if ($png->{write_ok}) {
        $png->error ("Writing already initialized");
        return;
    }
    $png->{write} = {};
    $png->{write}->{png} =
        [% config.base %]::Libpng::create_write_struct ();
    $png->{write}->{info} =
        [% config.base %]::Libpng::create_info_struct ($png->{write_png});
    $png->{write_ok} = 1;
}

sub raise_error
{
    my ($png, $error_level) = @_;
}

sub print_error
{
    my ($png, $error_level) = @_;
}

sub data
{
    my ($png, $data) = @_;
    if (! $data) {
        # Return the existing data
    } else {
        # Put $data into the PNG
        if ($png->{data}) {
            carp __PACKAGE__, ": you have asked me to put a scalar value as the PNG data, but I already have PNG data inside me. Please use a fresh object.";
        } elsif ($png->{read_file_name}) {
            carp __PACKAGE__, ": you have asked me to put a scalar value as the PNG data, but I already contain PNG data from a file called '$png->{read_file_name}. Please use a fresh object.";
        }
    }
    return $png->{data};
}

sub get_IHDR
{
    my ($png) = @_;
    if ($png->{IHDR}) {
        carp __PACKAGE__, ": I was requested to read the IHDR of the PNG data, but I have already read it.";
        return;
    }
    $png->{IHDR} = [% config.base %]::Libpng::get_IHDR ($png->{read_png});
}

sub get
{
    my ($png, $key) = @_;
    if (! $png->{IHDR}) {
        $png->get_IHDR ();
    }
    return $png->{IHDR}->{$key};
}

sub width
{
    my ($png, $width) = @_;
    if ($width) {
        write_set ($png, 'width', $width);
    }
    else {
        return get ($png, 'width');
    }
}

sub height
{
    my ($png, $height) = @_;
    if ($height) {
        write_set ($png, 'height', $height);
    }
    else {
        return get ($png, 'height');
    }
}

sub color_type
{
    my ($png, $color_type) = @_;
    if ($color_type) {
        write_set ($png, 'color_type', $color_type);
    }
    else {
        return 
            [% config.base %]::Libpng::color_type_name (
                get ($png, 'color_type')
            );
    }
}

sub bit_depth
{
    my ($png, $bit_depth) = @_;
    if ($bit_depth) {
        write_set ($png, 'bit_depth', $bit_depth);
    }
    else {
        return get ($png, 'bit_depth')
    }
}

sub rows
{
    my ($png, $rows) = @_;
    if ($rows) {
        # Set the rows
        if (! $png->{write_ok}) {
            $png->init_write ();
        }
        if (! $png->{write}->{set_IHDR}) {
            $png->{write}->{set_IHDR} = 1;
            [% config.base %]::Libpng::set_IHDR ($png->{write}->{png},
                                                 $png->{write}->{IHDR});
        }
        [% config.base %]::Libpng::set_rows ($png->{write_png}, $rows);
    }
    else {
        # Read the rows
        if (! $png->{read_ok}) {
            #        $png->handle_error ("");
            return;
        }
        return [% config.base %]::Libpng::get_rows ($png->{read_png});
    }
}

sub rowbytes
{
    my ($png) = @_;
    if (! $png->{read_ok}) {
#        $png->handle_error ("");
        return;
    }
    return [% config.base %]::Libpng::get_rowbytes ($png->{read_png});
}

sub text
{
    my ($png, $text) = @_;
    if (! $png->{text}) {
        my $text_ref = [];
        [% config.base %]::Libpng::get_text ($png->{read_png}, $text_ref);
        $png->{text} = $text_ref;
        # Change the text compression field to words rather than numbers.
        for my $text (@{$png->{text}}) {
            $text->{compression} =
                [% config.base %]::Libpng::text_compression_name ($text->{compression});
        }
    }
    if (! wantarray) {
        carp __PACKAGE__, ": the 'text' method returns an array";
    }
    return @{$png->{text}};
}

sub time
{
    my ($png, $time) = @_;
    my %time;
    [% config.base %]::Libpng::get_tIME ($png->{read_png}, \%time);
    return \%time;
}

# We need to free the memory associated with the C structs allocated
# inside libpng, so this class has a DESTROY method.

sub DESTROY
{
    my ($png) = @_;
    if ($png->{verbose}) {
        print "Freeing the memory of a PNG object.\n";
    }
    if ($png->{read_png}) {
        [% config.base %]::Libpng::destroy_read_struct ($png->{read_png});
    }
}

# The text segment of the PNG should probably be an object in its own
# right.

sub display_text
{
    my ($text) = @_;
    if (! $text || ref $text ne 'HASH' || ! $text->{key}) {
        carp __PACKAGE__, "::display_text called with something which doesn't seem to be a PNG text chunk";
        return;
    }
    print "\n";
    print "Key: $text->{key}";
    if ($text->{translated_keyword}) {
        print " [$text->{translated_keyword}";
        if ($text->{lang}) {
            print " in language $text->{lang}";
        }
        print "]";
    }
    print "\n";
    print "Compression: $text->{compression}\n";
    if ($text->{text}) {
        printf "Text";
        if (defined $text->{text_length}) {
            printf " (length %d)", $text->{text_length};
        }
        print ":\n$text->{text}\n"
    }
    else {
        print "Text is empty.\n";
    }
}

1;

[% INCLUDE png_doc %]

# Local Variables:
# mode: perl
# End:
