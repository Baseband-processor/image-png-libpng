=pod

[%- libpng = "\n\nB<Correspondence to libpng:> " -%]
[%- noinfo = "No info structure" -%]
[%- xnoinfo = BLOCK -%]
L</[% noinfo %]>
[%- END -%]
[%-  noinfoxref = BLOCK -%]
It does not take a second "info" argument. See [% xnoinfo -%].
[%- END -%]
[% transform_list = BLOCK %]
=over
[% FOR transform IN transforms %]
=item [% transform.name %]

[% transform.text %]
[% END %]
=back
[% END %]
[% libpngdoc = "The libpng documentation" %]
[% pngspec = "The PNG specification" %]
[% MACRO spec(subsection) BLOCK -%]
L<http://www.w3.org/TR/PNG/#[%- subsection -%]>
[%- END %]
[%- wfirstpng = BLOCK -%]
The first argument, C<$png>, is a writeable PNG structure created with 
L</create_write_struct>.
[%- END -%]
[%- rfirstpng = BLOCK -%]
The first argument, C<$png>, is a PNG structure created with 
L</create_read_struct>.
[%- END -%]
[%- MACRO cor BLOCK -%]
[% libpng %]

This function corresponds to C<png_[% fn %]>
[%- END %]
[% source_link = "http://cpansearch.perl.org/src/" _ config.author_pause _ "/" _ config.base_hyphen _ "-" _ config.version _ "/" %]
[% perl_libpng_c = "L<in the file C<perl-libpng.c> in the top directory of the distribution|" _ source_link  _ "perl-libpng.c>" %]
[% unused_title = "Unused arguments omitted" %]
[% unused = "See L<" _ unused_title _ ">." %]

=head1 NAME

Image::PNG::Libpng - Perl interface to the C library "libpng".

[% INCLUDE "warning" %]

=head1 SYNOPSIS

     use Image::PNG::Libpng ':all';
     my $png = create_read_struct ();
     open my $file, '<:raw', 'nice.png';
     $png->init_io ($file);
     $png->read_png ();
     close $file;

=head1 DESCRIPTION

This is a low-level library for accessing the contents of PNG
graphics. PNG means Portable Network Graphics and it is a common
standard for graphics.

Image::PNG::Libpng enables Perl to use the "libpng" library for
reading and writing files in the PNG format. Image::PNG::Libpng does
not contain "libpng". "libpng" must be installed on the computer prior
to installing Image::PNG::Libpng.

Image::PNG::Libpng consists of Perl subroutines which mirror
the C functions in libpng, plus helper subroutines to make it easier
to read and write PNG data in Perl. 

For those familiar with libpng, to know what the differences between
this module and libpng are, please go to the section L</Differences
from libpng>. For those not familiar with libpng, the module basically
mirrors the C interface of libpng. An extension of this module,
L<Image::PNG>, is intended to give a more intuitive interface to the
library.

=head1 FUNCTIONS

Most of these functions can also be used as methods, with the return
value of L</create_read_struct> and L</create_write_struct> as
arguments.

=head1 Simple input and output

These are convenience functions which combine common operations. They
don't have equivalents in libpng.

=head2 read_png_file

     my $png = read_png_file ('nice.png');

Open a file F<nice.png> and read its contents into C<$png>.

This combines L</create_read_struct>, open, L</init_io>, and
L</read_png>. The return value is the same as that of
L</create_read_struct> with the entire PNG image already read in.

=head2 write_png_file

     $png->write_png_file ('nice.png');

This combines open, L</init_io>, and L</write_png> to write an entire
PNG image out to a file. C<$png> must be the object created by
L</create_write_struct>, so L</read_png_file> followed by a call to
this does not work.

=head2 read_from_scalar

     my $png = read_from_scalar ($string);

This creates an image structure C<$png> from the contents of a Perl
scalar variable C<$string> containing a PNG image. [% rfirstpng %] It
reads in all the data from the structure on being called.

This is useful when image data is stored in a Perl scalar. For example

[% INCLUDE "get-www-png.pl" | xtidy %]

See also L</Input/output manipulation functions>.

=head2 write_to_scalar

    my $image_data = $png->write_to_scalar ();

This writes the PNG image data in C<$png> into a Perl scalar. So, for
example,

[% INCLUDE "png-cgi.pl" | xtidy %]

[% wfirstpng %] The return value of the subroutine is the Perl scalar
containing the image data.

See also L</Input/output manipulation functions>.

=head1 New-like functions

There are two different "new"-like functions, depending on whether you
want to read or write a PNG.

=head2 create_read_struct

     my $png = create_read_struct ();

Create a structure for reading a PNG. The return value can be used as
an object with the other functions as methods.

[% cor(fn="create_read_struct") %] plus C<create_info_struct> (see [%
xnoinfo %]) with the error and warning handler variables set up to use
Perl's error reporting.

=head2 create_write_struct

     my $png = create_write_struct ();

Create a structure for writing a PNG. This can be used as an object
with the other functions as methods.

[% cor(fn="create_write_struct") %] plus C<create_info_struct> (see [%
xnoinfo %])  with the error and warning handler variables set up to use
Perl's error reporting.

=head1 Input and output libpng style

These functions mirror libpng's functions.

=head2 init_io

     open my $file, "<", 'nice.png';
     $png->init_io ($file);

Set the file which C<$png> reads or writes to C<$file>. C<$file> must
be an already-opened Perl file handle. If C<$png> was created with
L<create_write_struct>, C<$file> must be opened for writing. If
C<$png> was created with L<create_read_struct>, C<$file> must be open
for reading.

Since PNG files are binary files, it is safest to specify the "raw"
pragma or use "binmode" with the file to override any default text
file encoding which Perl might be using:

     open my $file, ">:raw", 'output.png';

or

     open my $file, ">", 'output.png';
     binmode $file;

[% cor(fn="init_io") %], with a Perl
file handle substituting for the C C<FILE *>.

=head2 read_png

     $png->read_png ();

Read the entire PNG file into memory. You can provide an argument
containing transformations to apply to the image:

     use Image::PNG::Const qw/PNG_TRANSFORM_STRIP_ALPHA/;
     $png->read_png (PNG_TRANSFORM_STRIP_ALPHA);

In the absence of any third argument, the default value of
C<PNG_TRANSFORM_IDENTITY> is applied. The possible transformations
which can be applied are

[%- transform_list -%]

[% cor(fn="read_png") %] with a default value for the third
argument. The fourth, unused, argument to C<png_read_png> does not
need to be supplied. [% unused %]

[% noinfoxref %]

=head2 write_png

    $png->write_png ();

This writes the PNG to the file stream which was associated with it
using L</init_io>. For example,

    open my $output, ">:raw", 'out.png';
    $png->init_io ($output);
    $png->write_png ();
    close $output;

An optional argument consists of transformations to apply to the PNG
image before writing it:

    use Image::PNG::Const qw/PNG_TRANSFORM_STRIP_ALPHA/;
    $png->write_png (PNG_TRANSFORM_STRIP_ALPHA);

The transformations which can be applied are as follows:

[% transform_list %]

(NOTE: this list might be wrong, it is just copied from the linux lib
pages & the linux lib pages have different transformations for the
read and write png functions.)

[% cor(fn="write_png") %].

=head1 The image header

See [% spec("11IHDR") %] for information on the PNG standards for
the image header.

=head2 sig_cmp

    if (sig_cmp ($should_be_png)) {
        print "Your data does not have a PNG signature.\n";
    }

This subroutine looks at C<$should_be_png> and checks whether its
first bytes correspond to a valid PNG signature. It returns a true
value if they do not. It can also take two further arguments
consisting of a byte offset and a number of bytes to check
respectively:

    sig_cmp ($should_be_png, 0, 8);

If these arguments are not supplied, the byte offset is assumed
to be zero, and the number of bytes to check is assumed to be eight.

[% cor(fn="sig_cmp") %], with default arguments of
0 and 8 if second and third arguments are not supplied.

=head2 get_valid

    my $valid = $png->get_valid ();
    if ($valid->{oFFs}) {
        print "The PNG has valid screen offsets.\n";
    }

This function returns a hash with a key for each possible chunk which
may or may not be valid. The chunks which you can test for are

=over
[% FOR chunk IN chunks %]
=item [% chunk.name %]
[% END %]
=back

[% rfirstpng %]

[% cor(fn = "get_valid") %], with the difference being that the
return value is a hash containing a key for each possible chunk.

=head2 get_IHDR

    my $IHDR = $png->get_IHDR ();

Read the IHDR information from the PNG file. The return value is a
reference to a hash.

The hash reference contains the following fields:

=over

[% FOR field IN ihdr_fields -%]
[%- IF ! field.unused %]
=item [% field.name %]

[%- IF field.text %]
[% field.text %]
[%- END -%]
[%- IF field.retvalues -%]
This can take the values [% field.retvalues.join (", ") %].
[%- END %]
[%- END %]

[%- END %]

=back

So, for example, to get the width and height of an image,

    my $ihdr = $png->get_IHDR ();
    printf "Your image is %d x %d\n", $ihdr->{width}, $ihdr->{height};

[% cor(fn="get_IHDR") %], with a single Perl hash reference
used instead of the several pointers to integers used in libpng.

=head2 set_IHDR

    my $ihdr = { width => 10, height => 10, bit_depth => 8,
                 color_type => PNG_COLOR_TYPE_RGB };
    $png->set_IHDR ($ihdr);

Set the IHDR chunk (the image header) of the PNG image. 

[% wfirstpng %] The second argument is a hash with the following values:

=over

[% FOR field IN ihdr_fields -%]
[%- IF ! field.unused %]
=item [% field.name %]

[%- IF field.text %]
[% field.text %]
[%- END -%]
[%- IF field.retvalues -%]
This can have the values [% field.retvalues.join (", ") %].
[%- END %]
[%- END %]

[%- END %]

=back

Other fields in the hash are ignored.

[% cor(fn="set_IHDR") %], with a single Perl hash reference
used instead of the seven integers. The variables
[% FOR field IN ihdr_fields -%]
[%- IF field.unused -%]
C<[%- field.name %]>, [% END -%]
[%- END %]
in C<png_set_IHDR> can only take one possible value, so the routine
ignores them. [% unused %]

=head2 get_color_type

    my $color_type;
    $png->get_color_type (\$color_type);

This returns an integer value. If you want to get a name for the
colour type, use L</color_type_name>.

[% cor(fn="get_color_type") %].

=head2 color_type_name

    $name = color_type_name ($color_type);

Given a numerical colour type in C<$color_type>, return the equivalent
name. The name is in upper case, with words separated by underscores,
as in C<RGB_ALPHA>.

[% INCLUDE "color-type-name.pl" | xtidy %]

[% libpng %]

This function does not correspond to anything in libpng. The names of
the colour types are taken from those defined in the libpng header
file, C<png.h>.

=head1 Image data

These functions deal with accessing the image data itself.

=head2 get_rows

    my $rows = $png->get_rows ();
    my $pixel = substr ($rows->[10], 20, 1);

This returns the rows of the PNG image, after uncompressing and
unfiltering, as binary data. The return value, C<$rows> in the
example, is an array reference with a number of rows equal to the
height of the PNG image. Each row consists of the actual binary data,
which you will need to cut out using a routine like L<substr> or
L<unpack> to access pixel values. This binary data is likely to
contain bytes equal to zero.

You can get the number of bytes in each row using L</get_rowbytes>.

Each row is a Perl string. Perl terminates each row of data with an
extra zero byte at the end.

[% cor(fn="get_rows") %].

=head2 set_rows

    $png->set_rows (\@rows);

Set the rows of data to be written in to the PNG to C<@rows>. C<@rows>
needs to contain at least the same number of rows of data as the
height of the PNG image, and the length of each entry needs to be at
least the width of the entry times the number of bytes required for
each pixel.

C<set_rows> does not copy the row data, it just tells libpng where the
data is to be found. Thus, if you call this routine as above with an
array C<@rows>, then you alter the contents of C<@rows>, then call
L</write_png>, the contents written by C<write_png> will be the
contents of C<@rows> at the time you called C<write_png>, rather than
the contents at the time you called C<set_rows>. Thus I recommend that
you only use this immediately before calling L</write_png> to prevent
odd problems from occuring. (note to self - this is stupid, should
just copy the row data).

[% cor(fn="set_rows") %].

=head2 get_rowbytes

    my $bytes_in_a_row = $png->get_rowbytes ();

This returns the number of bytes needed to hold a transformed row of
an image.

[% cor(fn="get_rowbytes") %].

=head1 PNG timestamps

See [% spec("11timestampinfo") %] for information on the PNG standards for
time stamp information.

=head2 get_tIME

    my $time = $png->get_tIME ();
    if ($time && $time->{year} < 2005) {
        warn "Your PNG is now getting old. Don't forget to oil it to prevent rust.";
    }

This subroutine gets the modification time value of the PNG image and
puts it into fields labelled "year", "month", "day", "hour", "minute"
and "second" of the hash reference given as the third argument. If
there is no modification time in the file, it returns an undefined
value.

The "modification time value" of the PNG image is a chunk written into
the PNG file itself, and may not have the same value as the operating
system's modification time for the file. The tIME chunk is not a
compulsory requirement for PNG files, and most PNG image files do not
contain this chunk.

[% cor(fn="get_tIME") %], with a Perl hash reference
substituted for the C struct C<png_timep> used in libpng.

=head2 set_tIME

    # Set the time to "now"
    $png->set_tIME ();
    # Set the time
    $png->set_tIME ({year => 1999, month => 12});

Set the modification time of the PNG to the hash value given by the
argument. If the argument is omitted, the time is set to the current
time. If any of year, month, day, hour, minute or second is omitted,
these are set to zero.

[% cor(fn="set_tIME") %], with a Perl hash reference
substituted for the C struct C<png_timep> used in libpng.

=head1 Text chunks

See [% spec("11textinfo") %] for information on the PNG standards for
text information.

=head2 get_text

    my $text_chunks = $png->get_text ();

This subroutine gets all the text chunks in the PNG image and returns
them as an array reference. Each element of the array represents one
text chunk. The element representing one chunk is a hash reference
with the text fields such as "key", "lang_key", "compression" taken
from the PNG's information.

The text data is uncompressed by libpng. If it is international text,
Image::PNG::Libpng automatically puts it into Perl's internal
Unicode encoding (UTF-8). 

Note that PNG international text is required to be in the UTF-8
encoding, and non-international text is required to contain whitespace
and printable ASCII characters only. See L</[% pngspec %]> for more on
the requirements of a PNG text section.

[% cor(fn="get_text") %], with a Perl array of hash
references substituted for the C array of structs used in libpng.

=head2 set_text

    $png->set_text ($text_chunks);

This sets the text chunks in an array reference C<$text_chunks>. [%
wfirstarg %]. If it is called more than once, the chunks are not
overwritten but appended to the existing ones. (This behaviour is
copied from libpng itself.)

    $png->set_text ([{compression => PNG_TEXT_COMPRESSION_NONE,
                      key => "Copyright",
                      text => "Copyright (C) 1997 The Dukes of Hazzard",
              }]);

[% cor(fn="set_text") %].

=head1 Private chunks

See [% spec("12Use-of-private-chunks") %] for information on the PNG
standards for private chunks.

=head2 set_keep_unknown_chunks

    use Image::PNG::Const 'PNG_HANDLE_CHUNK_ALWAYS';
    $png->set_keep_unknown_chunks (PNG_HANDLE_CHUNK_ALWAYS);

Tell libpng not to discard unknown chunks when reading the file.

=head2 get_unknown_chunks

    my $private_chunks = $png->get_unknown_chunks ();
    # Get some data from a private chunk
    my $chunk_three_data = $private_chunks->[3]->{data};
    # Get the size of the data
    print length $chunk_three_data;

This gets all of the private chunks from the image. The return value
is an array reference containing hash references. If there are no
private chunks, this returns an undefined value. There is one element
of the array for each chunk member. It is necessary to call
L</set_keep_unknown_chunks> with an appropriate value before reading
the file, otherwise libpng discards unknown chunks when reading the
file.

Each member hash reference has the following keys:

=over
[% FOR field IN unknown_chunk_fields %]
=item [% field.name %]

[% field.description %]
[% END %]
=back

The "size" field of the PNG structure is not stored, because the
"data" member of the hash contains information on its length.

[% cor(fn="get_unknown_chunks") %]

=head2 set_unknown_chunks

This currently does not fully function.

[% cor(fn="set_unknown_chunks") %]

=head1 Helper functions

These helper functions assist the programmer in the transition from
libpng, which uses C conventions such as upper case macros standing
for numerical constants and C structures, to Perl's string-based
conventions.

=head2 text_compression_name

    my $name = Image::PNG::Libpng::text_compression_name ($text->{compression});

Given a numerical text compression type, return the equivalent
name. The name is in upper case. The possible return values are

=over

=item TEXT_NONE

=item TEXT_zTXt

=item ITXT_NONE

=item ITXT_zTXt

=item an empty string

if the compression method is unknown.

=back

The compression field is also used to store the information about
whether the text is "international text" in UTF-8 or not.

[% libpng %]

This function does not correspond to anything in libpng. The names of
the text compression types are based on those in C<png.h>, but without
the word "COMPRESSION", so for example the libpng constant
C<PNG_ITXT_COMPRESSION_zTXt> corresponds to a return value of
C<ITXT_zTXt>.

=head1 Library version functions

=head2 get_libpng_ver

    my $libpng_version = Image::PNG::Libpng::get_libpng_ver ();

This function returns the version of the libpng library which the
module is using.

[% cor(fn="get_libpng_ver") %]. However, it
doesn't require the C<png_structp> argument of the C function. See
L</About libpng>.

=head2 access_version_number

    my $libpng_version_number = Image::PNG::Libpng::access_version_number ();

This function returns the version of the libpng library which the
module is using as an integer number.

[% cor(fn="access_version_number") %].

=head1 Palettes

See [% spec("11PLTE") %] for information on the PNG standards for
the palette chunk.

=head2 get_PLTE

     my $colours = $png->get_PLTE ();
     # Get the green value of the twentieth entry in the palette.
     my $green = $colours->[20]->{green};

This function gets the palette from the PNG. The return value is an
array reference containing the palette. This array contains hash
references with the values "green", "blue" and "red" for the colour of
each pixel in the palette. If the PNG has no palette, it returns an
undefined value.

A PNG image may or may not contain a palette. To check whether the
image contains a palette, use something of the following form:

     use Image::PNG::Const ':all';
     my $color_type = $png->get_color_type ();
     if ($color_type == PNG_COLOR_TYPE_PALETTE) {
         # The PNG uses a palette.
     }

A PNG image may also contain a palette even when the "color_type" does
not indicate that. To check for that case, use L</get_valid>.

[% cor(fn="get_PLTE") %].

=head2 set_PLTE

    $png->set_PLTE ($palette);

Set the palette of C<$png>. The argument is an array reference
containing hash references. There is one hash reference for each
palette entry. The hash references contain three fields, red, green,
and blue, corresponding to the pixel value for that palette
entry. Other values in the hash references are ignored. For example,

    $png->set_PLTE ([{red => 1, green => 99, blue => 0x10},
                     {red => 0xFF, green => 0xFF, blue => 0xFF}]);

creates a palette with two entries in C<$png>.

[% cor(fn="set_PLTE") %].

=head1 Compression and filtering

=head2 set_filter

    use Image::PNG::Const 'PNG_FILTER_NONE';
    $png->set_filter (PNG_FILTER_NONE);

This sets the filters which are allowed to be used for writing a PNG
image. The possible values are

=over
[% FOR filter IN filters %]
=item [% filter.macro %]
[% END %]
=back

These can be combined using C<|> (logical or):

    use Image::PNG::Const ':all';
    set_filter ($png, PNG_FILTER_UP | PNG_FILTER_AVG);

Please see [% spec("9Filter-types") %] for the meanings of these
filter types.

[% cor(fn="set_filter") %] with the second (unused)
argument omitted. [% unused %]

=head1 Other chunks

These routines deal with the other possible chunks of PNGs.

The getter and setter routines for all other chunks are designed so
that the return value of C<get_wXYZ> is able to be used directly as
the value for C<set_wXYZ>, so the values of chunks can easily be
copied from one PNG to another.

    my $values = $png1->get_wXYZ ();
    $png2->set_wXYZ ($values);

If the chunk is not present, or if the chunk is not supported by the
user's version of libpng, the return value of C<get_wXYZ> is the
undefined value.

=head2 bKGD

The background colour of the PNG image.

See [% spec("11bKGD") %] for information on the PNG standards for
the background chunk.

=head3 get_bKGD

    my $bkgd = $png->get_bKGD ();

Get the bKGD (background) chunk of the image.

The return value is a hash with the following keys, depending on the
colour type of the image:

=over

=item index

For palette colour types, this is the offset into the palette.

=item gray

For greyscale colour types.

=item red

=item green

=item blue

=back

[% cor(fn="get_bKGD") %] with a hash function instead of a
C<png_color> struct.

=head3 set_bKGD

    $png->set_bKGD ($bkgd);

Set the bKGD (background) chunk of the image. C<$bkgd> is a hash
reference. The keys of the hash reference are as described in
L</get_bKGD>.

[% cor(fn="set_bKGD") %] with a hash function instead of a
C<png_color> struct.

=head2 cHRM

See [% spec("11cHRM") %] "cHRM Primary chromaticities and white
point" of the PNG specification.

=head3 get_cHRM

    my %cHRM = $png->get_cHRM ();

Get the cHRM chunk as a hash.

The keys of the hash are

=over
[% FOR key IN chunk_hash.cHRM.fields %]
=item [% key %]
[% END %]
=back

The values of the hash are floating point numbers between 0 and 1.

[% cor(fn="get_cHRM") %] with a hash function instead of the C<double>
arguments. The hash key names correspond to the names of the C<double>
arguments in libpng.

=head3 set_cHRM

    $png->set_cHRM (\%cHRM);

Set the cHRM chunk from a hash.

The keys of the hash are

=over
[% FOR key IN chunk_hash.cHRM.fields %]
=item [% key %]
[% END %]
=back

The values of the hash are floating point numbers between 0 and 1.

[% cor(fn="set_cHRM") %] with a hash function instead of the C<double>
arguments.

=head2 gAMA

See [% spec("11gAMA") %] of the PNG specification.

=head3 get_gAMA

    my $gamma = $png->get_gAMA ();

Get the gamma value or gAMA chunk. The return value is a
floating-point number.

[% cor(fn="get_gAMA") %]

=head3 set_gAMA

    $png->set_gAMA (0.2);

Set the gamma value or gAMA chunk.

[% cor(fn="set_gAMA") %]

=head2 sRGB

=head3 get_sRGB

    my $sRGB = $png->get_sRGB ();

The return value is an integer number.

[% cor(fn="get_sRGB") %]

=head3 set_sRGB

    $png->set_sRGB ($srgb);

C<$srgb> is an integer number.

[% cor(fn="set_sRGB") %]

=head2 pHYs

See [% spec("11pHYs") %]  of the PNG specification.

=head3 get_pHYs

    my $phys = $png->get_pHYs ();

The return value is a hash reference with the keys

=over

=item res_x

=item res_y

=item unit_type

=back

[% cor(fn="get_pHYs") %]

=head3 set_pHYs

    $png->set_pHYs ({res_x => 1, res_y => 1, unit_type => 99});

[% cor(fn="set_pHYs") %]

=head2 oFFs

This is an extension to the PNG specification. See L<http://www.libpng.org/pub/png/spec/1.1/pngext-1.1.0-pdg.html#C.oFFs>.

=head3 get_oFFs

    my $phys = $png->get_oFFs ();

Get oFFs chunk. Return value is a hash reference

[% cor(fn="get_oFFs") %]

=head3 set_oFFs

    $png->set_oFFs ({x_offset => 1, y_offset => 1, unit_type => 99});

Set oFFs chunk.

[% cor(fn="set_oFFs") %]

=head2 sBIT

See [% spec("11sBIT") %]  of the PNG specification.

=head3 get_sBIT

    my $sbit = $png->get_sBIT ();

[% cor(fn="get_sBIT") %]

=head3 set_sBIT

    $png->set_sBIT ({red => 1, blue => 2, green => 3});

[% cor(fn="set_sBIT") %]

=head2 iCCP

See [% spec("11iCCP") %]  of the PNG specification.

=head3 get_iCCP

    my $iccp = $png->get_iCCP ();

The return value is a hash with two keys,

=over

=item name

The name of the profile.

=item profile

The colour profile.

=back

[% cor(fn="get_sCCP") %]

=head3 set_iCCP

    $png->set_iCCP ({name => 'name', profile => 'profile'});

[% cor(fn="set_sCCP") %]

=head2 pCAL

pCAL is an extension of the PNG specification. See L<http://www.libpng.org/pub/png/spec/1.1/pngext-1.1.0-pdg.html#C.pCAL>.

=head3 get_pCAL

    my $pcal = $png->get_pCAL ();

Implemented but not tested. Return value is a hash with the following keys:

=over

=item purpose

The purpose string of the pCAL chunk.

=item x0

The zero value for the equation.

=item x1

The max value for the equation.

=item type

The equation type as a number.

=item units

The units as a string.

=item params

If this exists its value is a reference to an array containing the
parameter list of the pCAL chunk.

=back

[% cor(fn="get_pCAL") %]

=head3 set_pCAL

    $png->set_pCAL ($values);

Implemented but not tested. The input is just the same as the output
of L</get_pCAL>.

[% cor(fn="set_pCAL") %]

=head2 hIST

See [% spec("#11hIST") %]  of the PNG specification.

=head3 get_hIST

    my $hist = $png->get_hIST ();

Return value is array reference. The number of entries in the array
reference is the same as in the palette.

[% cor(fn="get_hIST") %]

=head3 set_hIST

    $png->set_hIST (\@hist);

Set the histogram.

[% cor(fn="set_hIST") %]

=head1 UNIMPLEMENTED CHUNKS

=head2 sCAL

This is an extension to the PNG specification. See
L<http://www.libpng.org/pub/png/spec/1.1/pngext-1.1.0-pdg.html#C.sCAL>.

=head3 get_sCAL

Not implemented.

=head3 set_sCAL

Not implemented.

=head2 tRNS

See [% spec("11tRNS") %]  of the PNG specification.

=head3 get_tRNS

Not implemented.

=head3 set_tRNS

Not implemented.

=head2 sPLT

See [% spec("11sPLT") %]  of the PNG specification.

=head3 get_sPLT

Not implemented.

=head3 set_sPLT

Not implemented.

=head1 META FUNCTIONS

These functions enable examination of the installed libpng from Perl.

=head2 supports

    if (supports ('iTXt')) {
        print "Your libpng supports international text.\n";
    }

This function returns true or false depending on whether the version
of libpng which this was compiled with supports or does not support a
particular facility.

The possible arguments to C<supports> are

=over

=item iTXt

Does the libpng support international text?

=back

=head1 EXPORTS

Nothing is exported by default, but all the functions in this module
can be exported on request. The export tag 'all' exports everything in
the module:

    use Image::PNG::Libpng ':all';
    # Now everything in the module has been imported

=head1 Differences from libpng

The functions in Image::PNG::Libpng are closely based on those of
libpng, with the following differences.

=head2 [% noinfo %]

This module, C<Image::PNG::Libpng> does not use the "info"
structure of libpng. Almost all libpng functions require two initial
arguments, a C<png_structp> and a C<png_infop>. However, in 
Image::PNG::Libpng, both the "png" and the "info" are contained in
the first argument to each function.

=head2 [% unused_title %]

This module eliminates all the unevaluated arguments of libpng. For
example, libpng requires the user to pass a pointer to a C<png_struct>
before calling the library to ask for its version number (see
L</get_libpng_ver>), but the library ignores the this structure
anyway, so this module does not duplicate this. There are many similar
instances of unevaluated arguments, which have all been eliminated
from this module.

If you are interested in exactly which libpng arguments are omitted,
you can find each instance [% perl_libpng_c %] in the macro
C<UNUSED_ZERO_ARG>.

=head2 Function return values are used to return values

In libpng, some functions return results using references, and some
return results using the function's return value. For example
C<png_get_rows> (see L</get_rows>) uses the return value of the
function to return an array of pointers, but C<png_get_PLTE> (see
L</get_PLTE>) uses a pointer reference to return an array of pointers,
and the return value to indicate errors. 

Image::PNG::Libpng uses only the return value. Errors and
non-existence are indicated by a return value of the undefined
value.

In libpng, some functions use the return value to indicate errors, and
some of the functions don't indicate errors but fail silently. Some of
the functions which use the return value to indicate an error use a
non-zero value to indicate an error, and some of them use a zero value
to indicate an error.

=head2 No destructors

Freeing the memory allocated by L</create_read_struct> and
L</create_write_struct> is automatically handled by Perl.

Older versions of this module (pre-0.18) had functions called
C<destroy_read_struct> and C<destroy_write_struct> corresponding to
the functions with similar names in libpng. From version 0.18, these
functions still exist, but they no longer do anything. The memory
freeing is now handled by Perl automatically.

=head2 Other unimplemented parts of libpng

=over

=item Memory management functions

This module does not offer an interface to C<png_malloc> and C<png_free>.

=item Error handling functions

This module does not offer an interface to C<png_error> and
C<png_get_error_ptr>. It redirects the error and warning handlers to
Perl's error stream.

=item Input/output manipulation functions

This module does not offer a direct interface to C<png_set_write_fn>
and C<png_set_read_fn>. However, it is possible to use their
functionality to access Perl data via L</read_from_scalar> and
L</write_to_scalar>.

=item Partial read/write functions

This module does not yet offer an interface to the partial read and
write functions of libpng. The reason is because I don't know enough
about Perl's internal structures to be able to create a memory-safe
interface to these functions. The partial read/write functions would
rely on preserving pointers to data structures within the Perl
program's data area between calls. So this module doesn't deal with
png_write_chunk, png_write_end, png_write_info, png_write_row, or
png_write_rows.

=item Other unsupported functions

All libpng deprecated functions are not supported.

Other unsupported functions include

=over

=item png_set_crc_action

=item png_set_sig_bytes

=item png_get_compression_buffer_size

=item png_set_compression_buffer_size

=item png_set_write_status_fn

=item png_set_unknown_chunk_location

=item png_set_check_for_invalid_index

=item png_set_benign_errors

=item png_benign_error

=item png_chunk_benign_error

=item png_get_image_width

=item png_get_image_height

=item png_get_bit_depth

=item png_get_color_type

=item png_get_interlace_type

=item png_get_compression_type

=item png_get_filter_type

=item png_get_channels

=item png_get_signature

=back

=back

=head1 DIAGNOSTICS

The module may produce the following error or warning messages. Errors
are marked "(F)" and warnings are marked "(W)".

=over
[% FOR diagnostic IN libpng_diagnostics %]

=item [% diagnostic.message %]

(
[%- IF diagnostic.type == "error" -%]
F
[%- ELSIF diagnostic.type == "warn" -%]
W
[%- END -%]
) [% IF diagnostic.comment %]
[% diagnostic.comment %]
[% END %]

[% END %]

=back

=head1 BUGS

This section documents some known deficiencies in the module.

=head2 set_rows is unreliable

The method L</set_rows> doesn't actually copy or write any
information. All it does is set a pointer to the pointers to the rows
in the PNG data structure. The actual data is only written when you
ask to write it. So if you "set_rows" to some data, then delete or
change that data before asking to write the png with L</write_png>,
you will get a memory error.

=head2 Conditional compilation

It is possible to compile a version of the libpng library without
support for various things. For example, it's possible to have a
libpng without support for text chunks by undefining a macro
C<PNG_TEXT_SUPPORTED>. The module supports some of the conditional
compilation choices which I've found in practice, but it does not
support every possible choice. If you encounter problems using this
Perl module because of a conditionally-compiled libpng, then please
let me know and I'll consider adding that facility to the module.

=head1 STANDALONE SCRIPT

A standalone script, F<pnginspect>, is installed with the
distribution. It prints out the contents of the chunks of the PNG file
on the command line.

=head1 SEE ALSO

=head2 [% pngspec %]

[% INCLUDE "pngspec" %]

=head2 [% libpngdoc %]

=head3 "Official" documentation

The starting point is the plain text libpng manual at
L<http://libpng.org/pub/png/libpng-manual.txt> and the manual page
libpng.3, which you can read using "man 3 libpng".

Be warned that the documentation which comes with libpng is rather
sketchy. See L</Differences from libpng>. It doesn't contain full
specifications (prototypes, return values) for all of the functions in
the library. If you are considering programming in C using libpng, you
will definitely also need to look at the header file "png.h".  In some
cases you will also need to look at the source code of the library.

=head3 Unofficial documentation

There is a collection of function definitions under the title
"Interface Definitions for libpng12" at
L<http://refspecs.freestandards.org/LSB_3.1.1/LSB-Desktop-generic/LSB-Desktop-generic/libpng12man.html>
as part of the "Linux Standard Base Desktop Specification". These
contain extensive information on the prototypes and return values for
the libpng routines, something which is often only available elsewhere
by actually looking at the libpng source code. These pages are usually
the first hits on search engines if you search for a function name in
libpng.

[% INCLUDE "other_modules" %]

[% INCLUDE "author" %]

=cut

# Local Variables:
# mode: perl
# End:
